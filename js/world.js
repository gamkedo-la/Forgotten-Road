const TEST_MODE = true;

const TILE_W = 32;
const TILE_H = 32;
const TILE_COLS = 45;
const TILE_ROWS = 39;
const GRID_HEIGHT = TILE_H * TILE_COLS;
const GRID_WIDTH = TILE_W * TILE_ROWS;

const TILE_GRASS = 0;
const TILE_WALL = 1;
const TILE_ROAD = 2;
const TILE_FLOOR = 3;
const TILE_TREE = 4;
const TILE_WATER = 5;
const TILE_CLIFF = 6;
const TILE_PRESSURE_PLATE = 7;
const TILE_WATER_1 = 8; //GOAL to automate this tile from water
const TILE_WATER_2 = 9;//GOAL to automate this tile from water
const TILE_TREE2 = 10;
const TILE_DIRT = 11;
const TILE_GRAVES = 12;
const TILE_CRYPT_GATE = 13;
const TILE_FENCE = 14;
const TILE_LAMP = 15;
const TILE_ROAD_CORNER_TL = 20;
const TILE_ROAD_CORNER_TR = 21;
const TILE_ROAD_CORNER_BL = 22;
const TILE_ROAD_CORNER_BR = 23;
const TILE_ROAD_HORIZONTAL = 24;
const TILE_ROAD_VERTICAL = 25;
const TILE_ROAD_CROSS = 26;
const TILE_TREE1_TL = 30;
const TILE_TREE1_TR = 31;
const TILE_TREE1_BL = 32;
const TILE_TREE1_BR = 33;
const TILE_TREE2_TL = 34;
const TILE_TREE2_TR = 35;
const TILE_TREE2_BL = 36;
const TILE_TREE2_BR = 37;
const TILE_BUSH1 = 38;
const TILE_BUSH2 = 39;
const TILE_LOCKED_DOOR = 49;
const TILE_UNLOCKED_DOOR = 50;
const TILE_KEY = 51;


const TILE_BARREL = 77;
const TILE_TREASURECHEST = 88;

const TILE_GOBLIN_SPAWN = 90;
const TILE_ORC_SPAWN = 91;
const TILE_KOBOLD_SPAWN = 92;
const TILE_SKELETON_SPAWN = 93;
const TILE_WRAITH_SPAWN = 94;
const TILE_GHOUL_SPAWN = 95;
const TILE_SKELETON_KING_SPAWN = 96;

const TILE_NPC_OLD_MAN = 100;
const TILE_NPC_BLACKSMITH = 101;
const TILE_NPC_ALCHEMIST = 102;
const TILE_NPC_CHEF = 103;
const TILE_NPC_CHUCK = 104;
const TILE_NPC_MICK = 105;
const TILE_NPC_DOSDOCTORA = 106; // not implemented
const TILE_NPC_DOSDOCTORB = 107; // not implemented


const TILE_CRYPT_10 = 170;
const TILE_CRYPT_11 = 171;
const TILE_CRYPT_12 = 172;
const TILE_CRYPT_13 = 173;
const TILE_CRYPT_14 = 174;
const TILE_CRYPT_20 = 175;
const TILE_CRYPT_21 = 176;
const TILE_CRYPT_22 = 177;
const TILE_CRYPT_23 = 178;
const TILE_CRYPT_24 = 179;
const TILE_CRYPT_30 = 180;
const TILE_CRYPT_31 = 181;
const TILE_CRYPT_32 = 182;
const TILE_CRYPT_33 = 183;
const TILE_CRYPT_34 = 184;
const TILE_CRYPT_40 = 185;
const TILE_CRYPT_41 = 186;
const TILE_CRYPT_42 = 187;
const TILE_CRYPT_43 = 188;
const TILE_CRYPT_44 = 189;
const TILE_CRYPT_50 = 190;
const TILE_CRYPT_51 = 191;
const TILE_CRYPT_52 = 192;
const TILE_CRYPT_53 = 193;
const TILE_CRYPT_54 = 194;


const TILE_DUNGEON_ENTRANCE = 199;
const TILE_DUNGEON_WALL_TOP = 200;
const TILE_DUNGEON_WALL_BOTTOM = 201;
const TILE_DUNGEON_WALL_LEFT = 202;
const TILE_DUNGEON_WALL_RIGHT = 203;
const TILE_DUNGEON_WALL_CORNER_TL = 204;
const TILE_DUNGEON_WALL_CORNER_TR = 205;
const TILE_DUNGEON_WALL_CORNER_BL = 206;
const TILE_DUNGEON_WALL_CORNER_BR = 207;
const TILE_DUNGEON_WALL_CENTER = 208; // wrong name: actually a floor tile
const TILE_DUNGEON_DOOR_TL = 209;
const TILE_DUNGEON_DOOR_TC = 210; // a floor tile so we can walk through
const TILE_DUNGEON_DOOR_TR = 211;
const TILE_DUNGEON_DOOR_BL = 212;
const TILE_DUNGEON_DOOR_BC = 213; // a floor tile so we can walk through
const TILE_DUNGEON_DOOR_BR = 214;
const TILE_DUNGEON_DOOR_CEILING = 299; // the wall tile behind the door needs to not block the player so it's the same image but considered a floor tile

var MAP_DATA = {
  fallDale: {
    buildings: {
      blacksmithShop: {
        x: 32,
        y: 1 * 32,
        sX: 0,
        sY: 0,
        sW: 32 * 6,
        sH: 32 * 6,
        width: 32 * 6,
        height: 32 * 6,
        color: "rgba(9, 0, 128, 0.5)",
        image: blacksmithShopPic,
        buildingMessage:
          "You're in the blacksmith shop! You can interact with NPCs or buy items.",
        insidebuilding: false,
      },
      alchemistShop: {
        x: 32 * 18,
        y: 5 * 32,
        sX: 0,
        sY: 0,
        sW: 32 * 6,
        sH: 32 * 6,
        width: 32 * 6,
        height: 32 * 6,
        color: "rgba(9, 0, 128, 0.5)",
        image: alchemistShopPic,
        buildingMessage:
          "You're in the alchemist shop! You can interact with NPCs or buy items.",
        insidebuilding: false,
      },
    },
  },
  northForest: {
    buildings: {},
  },
  eastFields: {
    buildings: {},
  },
  graveYard: {
    buildings: {},
  },
  SkeletonKingLair: {
    buildings: {}
  }
};

// Background grids
const WORLD_MAPS = {
  fallDale: [
    [  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  0, 26,  0,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6],
    [  0,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [  0,  1,  3,  3,  3,  3,  1,  0,  0,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0,  0,  0,  7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  0,  0,  0],
    [  4,  1,  3,  3,  3,  3,  1,  0,  0,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  3,  3,  3,  3,  1,  0,  0,  0],
    [  0,  1,  3,  3,  3,  3,  1,  0,  4,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  3,  3,  3,  3,  1,  0,  0,  0],
    [  0,  1,  3,  3,  3,  3,  1,  0,  0,  0,  0,  0, 26,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  3,  3,  3,  3,  1,  0,  0,  0],
    [  0,  1,  3,  3,  1,  1,  1,  0, 15,  0,  4,  2, 26,  0, 88,  0,  0,  0,  1,  3,  3,  3,  3,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  3,  3,  3,  3,  1,  0,  0,  0],
    [ 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,  0,  0,  0,  0,  0,  1,  3,  3,  3,  3,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  3,  1,  1,  1,  0,  0,  0],
    [  0,  0,  0, 77, 77, 77,  0,  0,  0,  0,  0, 26, 26,  0,  0,  0,  0,  0,  1,  3,  3,  3,  3,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0],
    [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 26,  0,  0,  0,  0,  0,  1,  3,  3,  3,  3,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 26,  0,104,  0,  0,  0,  0],
    [  0,  0,101,  0,  0,  0,  4,  0,  0,  0,  0,  0, 26,  0,  0,  4,  0,  0,  1,  3,  3,  3,  3,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0],
    [  0,  0,  0, 38,  4,  4,  0,  0,  7,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0,  0,  0,  2,102,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 15,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0],
    [  0,  0,  0,  0,  0,  4,  4,  0,  0,  0,  0,  0, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26],
    [  0,  0,  0,  0,  0, 30, 31,  0,  0, 34, 35,  0, 26,  2,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 15,  0,  0, 26,  0,  0,  0,  0,  0,  0,  0],
    [  0,  0,  0,  0,  0, 32, 33, 34, 35, 36, 37,  0, 26,  0,  1,  3,  3,  3,  3,  3,  3,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0,  0],
    [  0,  0,  0,  0,  0,  0,  0, 36, 37,  0,  0,  0, 26,  0,  1,  3,  3,  3,  3,  3,  3,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0,  0],
    [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 26,  0,  1,  3,  3,  3,  3,  3,  3,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0,  0],
    [  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0, 26,  0,  1,  1, 26,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0,  0],
    [  0,  0, 77,  0,  0,  0,  0, 39,  0,  0,  0,  0, 26, 26, 26, 26, 26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0,  0],
    [  0,  0,  0,  0, 77,  0,  4,  0,  0,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0,  0],
    [  0,  0, 77,  0,  0,  0,  0,  0,  0,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11, 11, 11, 11, 11, 11, 11, 11,  0,  0,  0,  0,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0,  0],
    [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 26,  0,  1,  1,  1,  1,  1,  1,  1,  0, 11, 11, 11, 11, 11, 11, 11, 11,  0,  1,  1,  1,  1,  1,  0, 26,  0,  0,  0,  0,  0,  0,  0],
    [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 26,  0,  1,  3,  3,  3,  3,  3,  1,  0, 11, 11, 11, 11, 11, 11, 11, 11,  0,  1,  3,  3,  3,  1,  0, 26,  0,  0,  0,  0,  0,  0,  0],
    [  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0, 26,  0,  1,  3,  3,  3,  3,  3,  1,  0, 11, 11, 11, 11, 11, 11, 11, 11,  0,  1,  3,  3,  3,  1,  0, 26,  0,  0,  0,  0,  0,  0,  0],
    [  0,204,200,200,200,200,200,200,205,  0,  0,  0, 26,  1,  3,  3,  3,  3,  3,  1,  0,  0, 11, 11, 11, 11, 11, 11, 11, 11,  0,  1,  3,  3,  3,  1,  0, 26,  0,  0,  0,  0,  0,  0,  0],
    [  0,202,201,201,201,201,201,201,203,  0,  0,  0, 26,  0,  1,  3,  3,  3,  3,  3,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  3,  3,  3,  1,  0, 26,  0,  0,  0,  0,  0,  0,  0],
    [  0,202,201,201,201,201,201,201,203,  0,  0,  0, 26,  1,  3,  3,  3,  3,  3,  1,  0,  0,  0,  0,  0,  0,105,  0,  0,  0,  1,  3,  3,  3,  1,  0, 26,  0,  0,  0,  0,  0,  0,  0,  0],
    [  0,202,208,208,208,208,208,208,203,  0,  0,  0, 26,  0,  1,  1,  3,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  0, 26,  0,  0,  0,  0,  0,  0,  0],
    [  0,202,208,208,208,208,208,208,203,  0,  0,  0, 26,  0,100,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,103,  0, 26,  0,  0,  0, 26,  0,  0,  0,  0,  0,  0,  0],
    [  0,202,200,200,200,200,208,208,207,  0,  0,  0, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,  0,  0,  0,  0,  0,  0,  0,  0],
    [  0,201,201,201,201,201,208,208,201,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [  0,201,201,201,201,201,208,208,201,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
  ], 
  northForest: [
    [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [10,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0, 10,  0, 10,  0,  0,  0,  0,  0,  0, 10,  0, 10,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0, 10,  0,  0,  0],
    [ 0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0, 10,  0,  0,  0,  0,  0,  0, 10,  0, 10,  0,  0,  0, 10,  0,  0,  0, 10,  0],
    [10,  0,  0,  0, 10,  0,  0, 90,  0,  0,  0, 90,  0,  0, 90,  0, 10,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0, 10,  0, 10,  0,  0,  0,  0, 10,  0,  0, 90,  0, 90,  0,  0,  0,  0,  0,  0, 10,  0],
    [10,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10],
    [10,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0, 10],
    [10,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0, 10],
    [10,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0, 10],
    [10,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0, 10],
    [10,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0, 10,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0, 10,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  2,  2,  2,  2,  2],
    [10,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0, 10,  0, 10,  0, 10,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0, 10,  0,  0, 90,  0, 90,  0,  0,  0, 90,  0,  0,  0,  0,  0,  0,  0,  0],
    [10,  0, 10,  0, 10,  0,  2,  0,  0, 10,  0, 10,  0, 10,  0, 10,  0, 10,  0, 10,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10],
    [10,  0, 10,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0, 10,  0, 10,  0, 10,  0,  0, 10,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0, 10,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10],
    [10,  0, 10,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0, 10,  0, 10,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0, 10,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0, 10],
    [10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0, 10,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0, 10],
    [10,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0, 10,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0, 90,  0,  0,  0,  0,  0,  0,  0, 10,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10],
    [10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0, 90,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10],
    [10,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0, 10,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10],
    [10,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0, 10,  0,  0, 10,  0, 10,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0, 10],
    [10,  0, 10,  0, 10,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0, 10,  0, 10,  0, 10,  0,  0,  0,  0,  0, 10,  0, 10,  0, 10,  0,  0, 10,  0, 10,  0, 10,  0, 10,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0, 10,  0, 10,  0, 10,  0, 10,  0, 10,  0,  0,  2,  0,  0, 10,  0, 10,  0, 10,  0, 10,  0,  0, 10,  0,  0, 10,  0, 10,  0, 10,  0, 10,  0, 10,  0, 10,  0, 10,  0, 10,  0, 10,  0],
  ],
  SkeletonKingLair: [
    [200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200],
    [202,201,201,201,201,201,201,201,201,201,201,201,201,201,202,201,201,201,201,201,201,201,201,201,201,203,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,203],
    [202,201,201,201,201,201,201,201,201,201,201,201,201,201,202,201,201,201,201,201,201,201,201,201,201,203,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,203],
    [202, 88,208,208,208,208,208,208,208,208,208,208,208,208,201, 88,208,208,208,208,208,208,208,208,208,203,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,203],
    [202,208,208,208,208,208,208,208,208,208,208,208,208,208,201,208,208,208,208,208,208,208,208,208,208,203,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,203],
    [202,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208, 93,208,208,208,203, 93,208,208,208,208,208, 93,208,208,208,208,208,208,208,208,208,208,208,203],
    [202,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,203,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,203],
    [202,208,208, 93,208,208,208,208,208,208,208,208,208,208,200,200,200,299,200,200,200,200,200,299,200,200,200,200,200,299,200,200,200,200,200,200,200,200,200,299,200,200,200,200,200],
    [202,208,208,208,208,208,208,208,208,208,208,208,208,208,202,201,209,210,211,201,201,202,209,210,211,201,201,201,209,210,211,201,203,201,201,201,201,201,209,210,211,201,201,201,203],
    [202,208,208,208,208,208,208,208,208,208,208,208,208,208,202,201,212,213,214,201,201,202,212,213,214,201,201,201,212,213,214,201,203,201,201,201,201,201,212,213,214,201,201,201,203],
    [202,208,208, 93,208,208,208,208,208,208,208,208,208,208,202,208,208,208,208,208,208,202,208,208,208,208,208,208,208,208,208, 88,203,208,208,208,208,208,208,208,208,208,208,208,203],
    [202,208,208,208,208,208,208,208,208,208,208,208,208,208,202,208,208,208,208,208,208,202,208,208,208,208,208,208,208,208,208,208,203,208,208,208,208,208,208,208,208,208,208,208,203],
    [202,208,208,208,208,208,208,208,208,208,208,208,208,208,202,208,208,208,208,208,208,202,208,208,208,208,208,208,208,208,208,208,203,208,208,208,208,208,208,208,208,208,208,208,203],
    [202,208,208,208,208,208,208,208,208,208,208,208,208,208,202,208,208,208,208,208,208,202,208,208,208,208,208,208,208,208,208,208,203,208,208,208,208, 93,208,208,208, 93,208,208,203],
    [202,208,208,208,208,208,208,208,208,208,208,208,208,208,202,208,208,208,208,208,208,202,208,208,208,208,208,208,208,208,208,208,203,208,208,208,208,208,208,208,208,208,208,208,203],
    [202,208,208,208,208,208,208,208,208,208,208,208,208,208,202,208,208, 95,208,208,208,202,208,208,208,208,208,208,208,208,208,208,203,208,208,208,208,208,208,208,208,208,208,208,203],
    [202,208,208,208,208,208,208,208,208,208,208,208,208,208,202, 88,208,208,208,208, 88,202,208,208,208,208,208,208,208,208,208,208,203,208,208,208,208,208,208,208,208,208,208,208,203],
    [200,200,200,200,299,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,299,200,200,200],
    [202,201,201,209,210,211,201,201,201,203,201,201,201,201,202,201,201,201,201,201,201,201,201,201,201,201,201,201,201,203,201,201,201,201,201,201,201,203,201,201,209,210,211,201,203],
    [202,201,201,212,213,214,201,201,201,203,201,201,201,201,202,201,201,201,201,201,201,201,201,201,201,201,201,201,201,203,201,201,201,201,201,201,201,203,201,201,212,213,214,201,203],
    [202,208,208,208,208,208,208,208,208,203,208,208,208,208,202,208,208,208,208,208,208,208,208,208,208,208,208,208,208,203,208, 88,208, 88,208, 88,208,203,208,208,208,208,208,208,203],
    [202,208,208,208,208,208,208,208,208,201,208,208,208,208,202,208,208,208,208,208,208,208,208,208,208,208,208,208,208,203,208,208,208,208,208, 94,208,203,208,208,208,208,208,208,203],
    [202,208,208,208,208,208,208,208,208,201,208,208,208,208,202,208,208,208,208,208,208,208,208,208,208,208,208,208,208,203,208, 88,208, 88,208, 88,208,203,208,208,208,208,208,208,203],
    [202,208,208,208,208,208,208,208,208,208,208,208,208,208,202,208,208,208,208,208,208,208,208,208, 96,208,208,208,208,203,208,208,208,208,208,208,208,203,208,208,208,208,208,208,203],
    [202,208,208, 93,208,208,208,208,208,208,208,208, 93,208,202,208,208,208,208,208,208,208,208,208,208,208,208,208,208,203,200,200,200,200,299,200,200,203,208,208,208,208,208,208,203],
    [202,208,208,208,208,208,208,208,208,203,208,208,208,208,202,208,208,208,208,208,208,208,208,208,208,208,208,208,208,203,201,201,201,209,210,211,201,203,208,208, 93,208, 93,208,203],
    [202,208,208,208,208,208,208,208,208,203,208,208,208,208,202,208,208,208,208,208,208,208,208,208,208,208,208,208,208,203,201,201,201,212,213,214,201,203,208,208,208,208,208,208,203],
    [202,200,200,200,200,200,200,200,200,200,200,299,200,200,200,200,299,200,200,200,200,200,200,200,200,200,200,200,200,200,208,208,208,208,208,208,208,203,208,208,208,208,208,208,203],
    [202,201,201,201,201,201,201,201,201,203,209,210,211,201,202,209,210,211,203,201,201,201,201,201,201,201,201,201,201,201,208,208,208,208,208,208,208,203,208,208,208,208,208,208,203],
    [202,201,201,201,201,201,201,201,201,203,212,213,214,201,202,212,213,214,203,201,201,201,201,201,201,201,201,201,201,201,208,208,208,208,208,208,208,203,208,208,208,208,208,208,203],
    [202,208,208,208,208,208,208,208,208,201,208,208,208,208,202,208,208,208,203,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,201,208,208,208,208,208,208,203],
    [202,208,208,208,208,208,208,208,208,201,208,208,208,208,202,208,208,208,203,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,201,208,208,208,208,208,208,203],
    [202,208,208,208,208,208,208,208,208,208,208,208,208,208,202,208,208,208,203,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208, 88,208,203],
    [202,208,208, 95,208,208,208,208,208,208,208,208,208, 92,208,208,208, 93,203,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,203],
    [202,208,208,208,208,208,208,208,208,203,208,208,208,208,208,208,208,208,203,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,203,208,208,208,208, 88,208,203],
    [202,208,208,208,208,208,208,208,208,203,208,208,208,208,202,208,208,208,203,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,203,208,208,208,208,208,208,203],
    [200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200],
    [201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201],
    [201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201],
  ],


  eastFields: [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,106,107,0,0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12,0, 4, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  ],
  southForest: [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  ],
  graveYard: [
  [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
  [ 0,  0,170,171,172,173,174,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
  [ 0,  0,175,176,177,178,179,  0,  0,  0,  0, 30, 31,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
  [ 0,  0,180,181,182,183,184,  0,  0,  0,  0, 32, 33, 30, 31,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
  [ 0,  0,185,186,187,188,189,  0,  0,  0,  0,  0,  0, 32, 33,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
  [ 0,  0,190,191,192,193,194,  0,  0,  0,  0,  0,  0, 34, 35,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
  [ 0,  0,  0,199,199,199,  0,  0,  0,  0,  0, 30, 31, 36, 37,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
  [14, 14, 14, 14,  2, 14, 14, 14, 14,  0,  0, 32, 33,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
  [ 0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0, 34, 35,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
  [ 0,  0, 12,  0,  2,  0, 12,  0,  0,  0,  0,  0,  0, 36, 37,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
  [ 0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
  [ 0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
  [ 0,  0, 12,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
  [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
  [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
  [ 0,  0, 12,  0,  0,  0, 12,  0,  0,  0,  0,  0,  0, 30, 31,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
  [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 32, 33,  0,  0,  0,  0,  0,  0,  0, 12,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
  [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 30, 31,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
  [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 32, 33,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  5,  5,  5,  5],
  [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 30, 31,  0,  0,  0,  0,  0,  0,  0,  0,  0, 93,  0, 93,  0,  0,  0,  8,  8,  8,  8,  8],
  [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 32, 33,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12,  0,  0,  0,  8,  8,  8,  8,  8],
  [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 30, 31, 34, 35,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  8,  8,  8,  8],
  [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 32, 33, 36, 37,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  8,  8,  8,  8],
  [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  8,  8,  8,  8],
  [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  8,  8,  8,  8],
  [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  8,  8,  8,  8],
  [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  8,  8,  8,  8],
  [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  8,  8,  8,  8],
  [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  8,  8,  8,  8],
  ]
};


var currentMapKey = "fallDale";
var backgroundGrid = WORLD_MAPS[currentMapKey];
fillInMissingMapdata(); // NOW!!! before game starts

var collisionGrid = [];
let pathfindingGrid = Array.from({ length: GRID_HEIGHT }, () =>
  new Array(GRID_WIDTH).fill(0)
);

let backgroundNeedsUpdate = true;
let cachedBackgroundGrid = [];

function SetupCollisionGridFromBackground() {
  if (!backgroundGrid || backgroundGrid.length === 0 || backgroundGrid[0].length === 0 ) {
    console.log("ERROR: backgroundGrid is broken:",backgroundGrid);
    return;
  }

  collisionGrid = new Array(TILE_ROWS)
    .fill(null)
    .map(() => new Array(TILE_COLS).fill(null));

    const unwalkableTiles = [
      // Nature
      TILE_TREE, TILE_TREE2,
      TILE_TREE1_TL, TILE_TREE1_TR, TILE_TREE1_BL, TILE_TREE1_BR,
      TILE_TREE2_TL, TILE_TREE2_TR, TILE_TREE2_BL, TILE_TREE2_BR,
      TILE_BUSH1, TILE_BUSH2, TILE_LOCKED_DOOR,
      
      // Water
      TILE_WATER, TILE_WATER_1, TILE_WATER_2,

      // Walls & Cliffs
      TILE_WALL, TILE_CLIFF, TILE_CRYPT_GATE,

      // Dungeon Walls
      TILE_DUNGEON_WALL_TOP, TILE_DUNGEON_WALL_BOTTOM,
      TILE_DUNGEON_WALL_LEFT, TILE_DUNGEON_WALL_RIGHT,
      TILE_DUNGEON_WALL_CORNER_TL, TILE_DUNGEON_WALL_CORNER_TR,
      TILE_DUNGEON_WALL_CORNER_BL, TILE_DUNGEON_WALL_CORNER_BR,

      // Dungeon Doors (optional — if you want them locked)
      TILE_DUNGEON_DOOR_TL, 
      //TILE_DUNGEON_DOOR_TC, // allowed for now
      TILE_DUNGEON_DOOR_TR,
      TILE_DUNGEON_DOOR_BL,
      //TILE_DUNGEON_DOOR_BC, // allowed for now
      TILE_DUNGEON_DOOR_BR,
      //TILE_DUNGEON_DOOR_CEILING, // walk right on through!

      // Other
      TILE_FENCE,
      TILE_GRAVES, // if you don't want players/enemies walking over gravestones
];


  for (let row = 0; row < TILE_ROWS; row++) {
    for (let col = 0; col < TILE_COLS; col++) {
      const idxHere = tileCoordToIndex(col, row);
      let tileType = TILE_GRASS; // default if data is missing

      if (!backgroundGrid[row]) {
        backgroundGrid[row] = [];
      }
      if (backgroundGrid[row][col] === undefined) {
        backgroundGrid[row][col] = TILE_GRASS;
      }

      tileType = backgroundGrid[row][col];


      collisionGrid[row][col] = new GridElement();
      collisionGrid[row][col].name = `${col},${row}`;
      collisionGrid[row][col].idx = idxHere;
      collisionGrid[row][col].elementType = tileType;
      collisionGrid[row][col].isWalkable = !unwalkableTiles.includes(tileType);
    }
  }
}

function getMonsterSpawnTiles() {
  const spawns = [];

  for (let row = 0; row < backgroundGrid.length; row++) {
    for (let col = 0; col < backgroundGrid[row].length; col++) {
      const tile = backgroundGrid[row][col];
      if (
        tile === TILE_GOBLIN_SPAWN ||
        tile === TILE_ORC_SPAWN ||
        tile === TILE_KOBOLD_SPAWN
      ) {
        spawns.push({ tile, col, row });
        backgroundGrid[row][col] = TILE_GRASS;
      } else if (
        tile === TILE_SKELETON_SPAWN ||
        tile === TILE_WRAITH_SPAWN ||
        tile === TILE_GHOUL_SPAWN
      ) {
        spawns.push({ tile, col, row });
        backgroundGrid[row][col] = TILE_DUNGEON_WALL_CENTER;
      }
    }
  }

  return spawns;
}


// this is used only on first load not when switching maps
function checkTileTypeForEntitySpawners(tileType, col, row) {

    let x = col * TILE_W;
    let y = row * TILE_H;

    if (tileType === TILE_TREASURECHEST) {
        console.log("spawning a treasure chest at "+x+","+y);
        let e = new TreasureChest(x,y);
        npcs.push(e); // fixme: this isn't really an NPC but it works
        tileType = TILE_GRASS; // fill the empty tile with grass

    } else if (tileType === TILE_BARREL) {
        console.log("spawning a barrel at "+x+","+y);
        let e = new Destructible("Barrel",x,y); // add loot array here
        destructibles.push(e);
        tileType = TILE_GRASS;  // fill the empty tile with grass
    } 

    return tileType;
}

function precomputeBackground() {
  cachedBackgroundGrid = [];

  for (let row = 0; row < TILE_ROWS; row++) {
    cachedBackgroundGrid[row] = [];

    for (let col = 0; col < TILE_COLS; col++) {
      let tileType = 0; // default
      if (!backgroundGrid[row] || !backgroundGrid[row][col]) {
        console.log("missing backgroundGrid data - ignoring...");
      } else {
        tileType = backgroundGrid[row][col];
      }
      
      // spawn entities (such as treasure) and
      // then transform in a regular TILE_GRASS tile
      tileType = checkTileTypeForEntitySpawners(tileType, col, row);
      
      // used to select which sprite to use for roads, etc
      const result =
        checkTileTypeForConnectors(tileType, col, row) ||
        checkTileTypeForRandomization(tileType) ||
        {};
      const { sX = 0, sY = 0 } = result;
      cachedBackgroundGrid[row][col] = { sX, sY, tileType };
      backgroundGrid[row][col] = tileType; // update original tile if we spawned an entity it is now grass
    }
  }

  backgroundNeedsUpdate = false;
}

function drawBackground(context = ctx) {
  const rows = backgroundGrid.length;
  const cols = backgroundGrid[0].length;

  for (let row = 0; row < rows; row++) {
    for (let col = 0; col < cols; col++) {
      const tile = backgroundGrid[row][col];
      const x = col * TILE_W;
      const y = row * TILE_H;

      var img = tilePics[tile];
      
      // if (!img) continue;
      // if there is no tile image available, draw grass instead
      if (!img) img = tilePics[TILE_GRASS]; // default

      const sX = img.sX || 0;
      const sY = img.sY || 0;
      const sW = img.sW || TILE_W;
      const sH = img.sH || TILE_H;

      context.drawImage(img, sX, sY, sW, sH, x, y, TILE_W, TILE_H);

      if (!img.sX && img.sX !== 0) {
        console.warn("Missing sX for tile", tile);
      }
    }
  }
}

function updateBackground() {
  backgroundNeedsUpdate = true;
}

function checkTileTypeForConnectors(tileType, x, y) {
  if (tileType === TILE_ROAD) {
    const above = y > 0 && backgroundGrid[y - 1][x] === TILE_ROAD;
    const below =
      y < backgroundGrid.length - 1 && backgroundGrid[y + 1][x] === TILE_ROAD;
    const left = x > 0 && backgroundGrid[y][x - 1] === TILE_ROAD;
    const right =
      x < backgroundGrid[0].length - 1 &&
      backgroundGrid[y][x + 1] === TILE_ROAD;

    if (above && below) return { sX: 32, sY: 32 };
    if (left && right) return { sX: 0, sY: 32 };
    if (above && right) return { sX: 0, sY: 64 };
    if (above && left) return { sX: 64, sY: 64 };
    if (below && right) return { sX: 0, sY: 0 };
    if (below && left) return { sX: 64, sY: 0 };

    return { sX: 32, sY: 32 };
  }

  if (tileType === TILE_CLIFF) {
    const leftIsGrass = x > 0 && backgroundGrid[y][x - 1] === TILE_GRASS;
    const rightIsGrass =
      x < backgroundGrid[0].length - 1 &&
      backgroundGrid[y][x + 1] === TILE_GRASS;

    if (leftIsGrass && !rightIsGrass) {
      return { sX: 0, sY: 0 }; // opens to grass on the left
    } else if (!leftIsGrass && rightIsGrass) {
      return { sX: 64, sY: 0 }; // opens to grass on the right
    } else {
      return { sX: 32, sY: 0 }; // default center cliff
    }
  }
  
  if (tileType === TILE_DIRT) {
    const up = y > 0 && backgroundGrid[y - 1][x] === TILE_GRASS;
    const down = y < backgroundGrid.length - 1 && backgroundGrid[y + 1][x] === TILE_GRASS;
    const left = x > 0 && backgroundGrid[y][x - 1] === TILE_GRASS;
    const right = x < backgroundGrid[0].length - 1 && backgroundGrid[y][x + 1] === TILE_GRASS;
  
    // Determine sprite based on surroundings
    let tileIndex = 4; // default center tile (no grass touching)
    if (up && !down && !left && !right) tileIndex = 1;
    else if (!up && down && !left && !right) tileIndex = 7;
    else if (!up && !down && left && !right) tileIndex = 3;
    else if (!up && !down && !left && right) tileIndex = 5;
    else if (up && down && !left && !right) tileIndex = 4; // vertical bridge
    else if (!up && !down && left && right) tileIndex = 4; // horizontal bridge
    else if (up && left) tileIndex = 0;
    else if (up && right) tileIndex = 2;
    else if (down && left) tileIndex = 6;
    else if (down && right) tileIndex = 8;
  
    const sX = (tileIndex % 3) * 32;
    const sY = Math.floor(tileIndex / 3) * 32;
    return { sX, sY };
  }

  return null;
}

function checkTileTypeForRandomization(tileType) {
  if (tileType === TILE_GRASS) {
    const options = 9;
    const rand = Math.floor(Math.random() * (options + 1));
    return { sX: 32 * rand, sY: 0 };
  }
  if (tileType === TILE_FLOOR) {
    const options = 9;
    const rand = Math.floor(Math.random() * (options + 1));
    return { sX: 32 * rand, sY: 64 };
  }

  if (
    tileType === TILE_WATER ||
    tileType === TILE_WATER_1 ||
    tileType === TILE_WATER_2
  ) {
    const options = 1; // col
    const randCol = Math.floor(Math.random() * options);
  
    let sY = 0;
    if (tileType === TILE_WATER_1) sY = 32;
    else if (tileType === TILE_WATER_2) sY = 64;
  
    return {
      sX: 32 * randCol,
      sY: sY
    };
  }
  

  if (tileType === TILE_PRESSURE_PLATE) {
    return { sX: 64, sY: 96 };
  }
  return null;
}

function tileCoordToIndex(col, row) {
  return col + TILE_COLS * row;
}

// fixme: only used when switching worlds
// please see the similar code in checkTileTypeForEntitySpawners()
// which gets used instead of this during first startup
const TILE_ENTITY_MAP = {
  
  [TILE_TREASURECHEST]: ({ x, y }) => {
        console.log("spawning a treasure chest thanks to TILE_ENTITY_MAP at "+x+","+y);
        let e = new TreasureChest(x,y);
        npcs.push(e); // fixme: this isn't really an NPC but it works
        return e;
  },

  [TILE_GOBLIN_SPAWN]: ({ x, y }) => createMonster({
    name: "Goblin", x, y, damage: 5, maxHealth: 30, type: "melee"
  }),
    [TILE_GHOUL_SPAWN]: ({ x, y }) => createMonster({
    name: "Ghoul", x, y, damage: 5, maxHealth: 50, type: "melee"
  }),
    [TILE_SKELETON_SPAWN]: ({ x, y }) => createMonster({
    name: "Skeleton", x, y, damage: 10, maxHealth: 10, type: "melee"
  }),
    [TILE_WRAITH_SPAWN]: ({ x, y }) => createMonster({
    name: "Wraith", x, y, damage: 15, maxHealth: 5, type: "melee"
  }),
    [TILE_SKELETON_KING_SPAWN]: ({ x, y }) => createMonster({
    name: "Skeleton King", x, y, damage: 15, maxHealth: 200, type: "melee"
  }),
    [TILE_GOBLIN_SPAWN]: ({ x, y }) => createMonster({
    name: "Goblin", x, y, damage: 5, maxHealth: 30, type: "melee"
  }),
  [TILE_ORC_SPAWN]: ({ x, y }) => createMonster({
    name: "Orc", x, y, damage: 10, maxHealth: 40, type: "melee", size: 40
  }),
  [TILE_NPC_OLD_MAN]: ({ x, y }) => new NPC("Old Man", x, y, [
    "The forest holds many secrets...",
    "Sometimes I still hear the wind whisper his name.",
    "I wasn't always this old, you know.",
    "We lost something out there..."
  ], null, {
    day: { active: true, destination: { x, y }, dialogueSet: "day" },
    night: { active: false, destination: toXY(x, y), dialogueSet: "night" }
  }),
  [TILE_NPC_BLACKSMITH]: ({ x, y }) => new NPC("Blacksmith", x, y, [
    "Need something forged?", "I can sharpen that blade.", "Strong arms make strong steel."
  ], null, {
    day: { active: true, destination: { x, y }, dialogueSet: "day" },
    night: { active: false, destination: toXY(x, y), dialogueSet: "night" }
  }),
  [TILE_NPC_ALCHEMIST]: ({ x, y }) => new NPC("Alchemist", x, y, [
    "Potions, elixirs, and ancient remedies!",
    "Tread carefully — not every potion is for the faint-hearted.",
    "Knowledge is power... and danger."
  ], null, {
    day: { active: true, destination: { x, y }, dialogueSet: "day" },
    night: { active: false, destination: toXY(x, y), dialogueSet: "night" }
  }),
  [TILE_NPC_CHEF]: ({ x, y }) => new NPC("Chef Gormondo", x, y, [
    "Please help me make a royal omelette.",
    "I am missing a few key ingredients.",
    "As chef, my duty requires I remain here.",
    "All I need are eggs and mushrooms.",
  ], null, {
    day: { active: true, destination: { x, y }, dialogueSet: "day" },
      night: { active: false, destination: toXY(x, y), dialogueSet: "night" }
  }),
  [TILE_NPC_CHUCK]: ({ x, y }) => new NPC("Chuck", x, y, [
    "I miss the days of adventuring.",
    "Those skeletons came to life!",
    "I can't believe I lost my sword.",
  ], null, {
    day: { active: true, destination: { x, y }, dialogueSet: "day" },
    night: { active: false, destination: toXY(x, y), dialogueSet: "night" }
  }),
  [TILE_NPC_MICK]: ({ x, y }) => new NPC("Mick", x, y, [
    "A hard day's work on the farm.",
    "I wish I had mushrooms for Chef",
  ], null, {
    day: { active: true, destination: { x, y }, dialogueSet: "day" },
      night: { active: false, destination: toXY(x, y), dialogueSet: "night" }
  }),
  [TILE_NPC_DOSDOCTORA]: ({ x, y }) => new NPC("First Doctor", x, y, [
    "The melody of the cosmos speaks to me.",
    "If only I could sing it.",
  ], null, {
    day: { active: true, destination: { x, y }, dialogueSet: "day" },
    night: { active: false, destination: toXY(x, y), dialogueSet: "night" }
  }),
  [TILE_NPC_DOSDOCTORB]: ({ x, y }) => new NPC("Second Doctor", x, y, [
    "We had to know the inner workings.",
    "It didn't feel a thing.",
  ], null, {
    day: { active: true, destination: { x, y }, dialogueSet: "day" },
    night: { active: false, destination: toXY(x, y), dialogueSet: "night" }
  }),
};

const toXY = (col, row) => ({ x: col * TILE_W, y: row * TILE_H })

// this is used when switching maps
function spawnEntitiesFromTiles() {
  const grid = backgroundGrid;
  enemies.length = 0;
  npcs.length = 0;

  for (let row = 0; row < grid.length; row++) {
    for (let col = 0; col < grid[row].length; col++) {
      const tile = grid[row][col];
      const spawnFunc = TILE_ENTITY_MAP[tile];
      if (spawnFunc) {
        //console.log("spawnFunc: ",spawnFunc);
        const x = col * TILE_W;
        const y = row * TILE_H;
        const entity = spawnFunc({ x, y });

        if (entity instanceof TreasureChest) {
            if (currentMapKey == "SkeletonKingLair") {
                grid[row][col] = TILE_DUNGEON_WALL_CENTER; 
            }
        }

        if (entity instanceof Monster) {
          enemies.push(entity);
          // fill empty space with proper tile
          if (currentMapKey == "SkeletonKingLair") {
            // this const has the wrong name: it is actually a floor tile
            grid[row][col] = TILE_DUNGEON_WALL_CENTER; 
          } else {
            grid[row][col] = TILE_GRASS;
          }
        } else if (entity instanceof NPC) {
          npcs.push(entity);
        }
      }
    }
  }
}

function unlockCryptGate() {
  for (let row = 0; row < TILE_ROWS; row++) {
    for (let col = 0; col < TILE_COLS; col++) {
      if (backgroundGrid[row][col] === TILE_CRYPT_GATE) {
        backgroundGrid[row][col] = TILE_ROAD;
        collisionGrid[row][col].isWalkable = true;
      }
    }
  }
  console.log("Crypt gate opened!");
}

// some of the arrays are the wrong size: this ensures that code
// which iterates through map data doesn't encounter any undefineds
function fillInMissingMapdata() {

    for (r=0; r<TILE_ROWS; r++) {
        
        // missing row?
        if (WORLD_MAPS.fallDale[r]==undefined) WORLD_MAPS.fallDale[r] = [];
        if (WORLD_MAPS.eastFields[r]==undefined) WORLD_MAPS.eastFields[r] = [];
        if (WORLD_MAPS.graveYard[r]==undefined) WORLD_MAPS.graveYard[r] = [];
        if (WORLD_MAPS.southForest[r]==undefined) WORLD_MAPS.southForest[r] = [];
        
        for (c=0; c<TILE_COLS; c++) {

            // missing col?
            if (WORLD_MAPS.fallDale[r][c]==undefined) WORLD_MAPS.fallDale[r][c] = 0;
            if (WORLD_MAPS.eastFields[r][c]==undefined) WORLD_MAPS.eastFields[r][c] = 0;
            if (WORLD_MAPS.graveYard[r][c]==undefined) WORLD_MAPS.graveYard[r][c] = 0;
            if (WORLD_MAPS.southForest[r][c]==undefined) WORLD_MAPS.southForest[r][c] = 0;

        }
    }
}


function addTestBarrels() {
  if (!TEST_MODE) return;
  console.log("Adding test barrels to starting map...");
  WORLD_MAPS.fallDale[3][8] = TILE_BARREL;
  WORLD_MAPS.fallDale[4][8] = TILE_BARREL;
  WORLD_MAPS.fallDale[5][8] = TILE_BARREL;
}

addTestBarrels();
